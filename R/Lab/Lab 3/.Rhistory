t1 <- data.frame(Height = c(5, 5.1, 5.2, 5.12, 5.5),
No_of_Students = c(10, 15, 20, 12, 11))
View(t1)
print(t1[t1$Height > 5.2,])
#t$Height > 5.2 → Creates a logical condition (TRUE or FALSE) for rows where Height > 5.2.
#t1[...] → Filters rows in t1 based on the condition.
#The comma ([,]) → Keeps all columns after selecting rows.
print(t1[t1$Height > 5.1 & t1$Height <5.5,])
t2 <- data.frame(Height = c(4.8, 6.3, 6, 5.5, 5.11),
No_of_Students = c(4, 2, 5, 8, 20))
View(t2)
#Create a new dataframe and then bind
New1 <- rbind(t1, t2)
View(New1)
New2 <- cbind(t1, t2)
View(New2)
dim(New2)
ok <- New1[1]
print(ok)
View(New1)
okay <- New1[0]
print(okay <- New1[0])
print(okay <- New1[2])
View(New1)
old <- data.frame(Height = c(5, 5.1, 5.2, 5.12, 5.5),
No_of_Students = c(10, 15, 20, 12, 11))
View(old)
print(old[old$Height > 5.2,])
#t$Height > 5.2 → Creates a logical condition (TRUE or FALSE) for rows where Height > 5.2.
#old[...] → Filters rows in old based on the condition.
#The comma ([,]) → Keeps all columns after selecting rows.
print(old[old$Height > 5.1 & old$Height <5.5,])
new <- data.frame(Height = c(4.8, 6.3, 6, 5.5, 5.11),
No_of_Students = c(4, 2, 5, 8, 20))
View(new)
#Create a new dataframe and then bind
t3 <- rbind(old, new)
View(t3)
t4 <- cbind(old, new)
View(t4)
dim(t4)
ok <- t3[1]
print(ok)
print(okay <- t3[2])
old <- data.frame(Height = c(5, 5.1, 5.2, 5.12, 5.5),
No_of_Students = c(10, 15, 20, 12, 11))
View(old)
print(old[old$Height > 5.2,])
#t$Height > 5.2 → Creates a logical condition (TRUE or FALSE) for rows where Height > 5.2.
#old[...] → Filters rows in old based on the condition.
#The comma ([,]) → Keeps all columns after selecting rows.
print(old[old$Height > 5.1 & old$Height <5.5,])
new <- data.frame(Height-new = c(4.8, 6.3, 6, 5.5, 5.11),
#Create a new dataframe and then bind
t3 <- rbind(old, new)
old <- data.frame(Height = c(5, 5.1, 5.2, 5.12, 5.5),
No_of_Students = c(10, 15, 20, 12, 11))
View(old)
print(old[old$Height > 5.2,])
#t$Height > 5.2 → Creates a logical condition (TRUE or FALSE) for rows where Height > 5.2.
#old[...] → Filters rows in old based on the condition.
#The comma ([,]) → Keeps all columns after selecting rows.
print(old[old$Height > 5.1 & old$Height <5.5,])
new <- data.frame(Height-new = c(4.8, 6.3, 6, 5.5, 5.11),
new <- data.frame(Height_new = c(4.8, 6.3, 6, 5.5, 5.11),
No_of_Students_new = c(4, 2, 5, 8, 20))
View(new)
#Create a new dataframe and then bind
t3 <- rbind(old, new)
#Create a new dataframe and then bind
t3 <- rbind(old, new)
print(old[old$Height > 5.1 & old$Height <5.5,])
new <- data.frame(Height_new = c(4.8, 6.3, 6, 5.5, 5.11),
No_of_Students_new = c(4, 2, 5, 8, 20))
View(new)
#Create a new dataframe and then bind
t3 <- rbind(old, new)
#Create a new dataframe and then bind
t3 <- rbind(old, new)
t1 <- data.frame(Height = c(5, 5.1, 5.2, 5.12, 5.5),
No_of_Students = c(10, 15, 20, 12, 11))
View(t1)
print(t1[t1$Height > 5.2,])
#t$Height > 5.2 → Creates a logical condition (TRUE or FALSE) for rows where Height > 5.2.
#t1[...] → Filters rows in t1 based on the condition.
#The comma ([,]) → Keeps all columns after selecting rows.
print(t1[t1$Height > 5.1 & t1$Height <5.5,])
t2 <- data.frame(Height = c(4.8, 6.3, 6, 5.5, 5.11),
No_of_Students = c(4, 2, 5, 8, 20))
View(t2)
#Create a new dataframe and then bind
New1 <- rbind(t1, t2)
View(New1)
New2 <- cbind(t1, t2)
View(New2)
dim(New2)
ok <- New1[1]
print(ok)
print(okay <- New1[2])
t1 <- data.frame(Height = c(5, 5.1, 5.2, 5.12, 5.5),
No_of_Students = c(10, 15, 20, 12, 11))
View(t1)
print(t1[t1$Height > 5.2,])
#t$Height > 5.2 → Creates a logical condition (TRUE or FALSE) for rows where Height > 5.2.
#t1[...] → Filters rows in t1 based on the condition.
#The comma ([,]) → Keeps all columns after selecting rows.
print(t1[t1$Height > 5.1 & t1$Height <5.5,])
t2 <- data.frame(Height_new = c(4.8, 6.3, 6, 5.5, 5.11),
No_of_Students_new = c(4, 2, 5, 8, 20))
View(t2)
#Create a new dataframe and then bind
New1 <- rbind(t1, t2)
colnames(t2)[ncol(Height)] <- "New Height"
colnames(New1)[ncol(Height)] <- "New Height"
View(New1)
t1 <- data.frame(Height = c(5, 5.1, 5.2, 5.12, 5.5),
No_of_Students = c(10, 15, 20, 12, 11))
View(t1)
print(t1[t1$Height > 5.2,])
#t$Height > 5.2 → Creates a logical condition (TRUE or FALSE) for rows where Height > 5.2.
#t1[...] → Filters rows in t1 based on the condition.
#The comma ([,]) → Keeps all columns after selecting rows.
print(t1[t1$Height > 5.1 & t1$Height <5.5,])
t2 <- data.frame(Height = c(4.8, 6.3, 6, 5.5, 5.11),
No_of_Students = c(4, 2, 5, 8, 20))
View(t2)
#Create a new dataframe and then bind
New1 <- rbind(t1, t2)
View(New1)
New2 <- cbind(t1, t2)
View(New2)
dim(New2)
ok <- New1[1]
print(ok)
print(okay <- New1[2])
library(dplyr)
install.packages("dplyr")
library(dplyr)
# Create a data frame
data <- data.frame(
friend_id = c(1, 2, 3, 4, 5),
friend_name = c("Sachin", "Sourav", "Dravid", "Sehwag", "Dhoni"),
location = c("Kolkata", "Delhi", "Bangalore", "Hyderabad", "Chennai")
)
data
# Remove a row with friend_id = 3
data <- subset(data, friend_id != 3)
data
# Remove a row with friend_id = 3
data <- subset(data, -c(friend_id != 3) #Syntax: subset(df, expr)
data
# Remove a row with friend_id = 3
data <- subset(data, -(friend_id != 3) #Syntax: subset(df, expr)
data
# Remove a row with friend_id = 3
data <- subset(data, -c(friend_id != 3) #Syntax: subset(df, expr)
data
dnew <- subset(data, select = -c(friend_id = 3))
dnew
data()
View(DNase)
new <- data.frame(RunXconc = c(DNase$Run * DNase$conc))
new <- data.frame(RunXconc = c(DNase$Run ** DNase$conc))
new <- data.frame(RunXconc = c(DNase$Run * DNase$conc))
new <- data.frame(RunXconc = c((DNase$Run) * (DNase$conc)))
View(new)
new <- data.frame(RunXconc = c((DNase$Run[1]) * (DNase$conc[1])))
View(new)
new <- data.frame(RunXconc = c((DNase$Run[1]) * (DNase$conc[1]),))
View(new)
new <- data.frame(RunXconc = c((DNase$Run[1]) * (DNase$conc[2])))
View(new)
new <- data.frame(RunXconc = c((DNase$Run) * (DNase$conc)))
View(new)
new <- data.frame(RunXconc = c((DNase$conc) * (DNase$density)))
View(new)
data()
View(DNase)
new <- data.frame(RunXconc = c((DNase$conc) * (DNase$density)))
View(new)
ok <- cbind(new, DNase)
View(ok)
ok <- cbind(Dnase, new)
View(ok)
data()
View(DNase)
new <- data.frame(RunXconc = c((DNase$conc) * (DNase$density)))
View(new)
ok <- cbind(DNase, new)
View(ok)
# Remove a row with friend_id = 3
data <- subset(data, friend_id != 3) #Syntax: subset(df, expr)
data <- data.frame(
friend_id = c(1, 2, 3, 4, 5),
friend_name = c("Sachin", "Sourav", "Dravid", "Sehwag", "Dhoni"),
location = c("Kolkata", "Delhi", "Bangalore", "Hyderabad", "Chennai")
)
data
# Remove a row with friend_id = 3
data <- subset(data, friend_id != 3) #Syntax: subset(df, expr)
data
#OR
dnew <- subset(data, select = -c(friend_id = 3))
dnew
mean(Book2$Total)
library(readr)
Book2 <- read_csv("HW/Book2.csv")
View(Book2)
mean(Book2$Total)
getmode <- function(V) {
uniqv <- unique(V)
uniqv[which.max(tabulate(match(V, uniqv)))]
}
getmode(Book2$Total)
median(Book2$Total)
max(Book2$Total)
min(Book2$Total)
range(Book2$Total)
summary(Book2$Total)
pie(table(Book2$`UG/PG`))
plot(Book2$`HSC/UG`)
(x/8) * (x >= 0 & x < 2) +
(1/4) * (x >=2 & x < 4) +
(-x/8 + 3/4) * (x >=4 & x < 6) +
(0) * (x >= 6)
#Q1
f <- function(x) {
(x/8) * (x >= 0 & x < 2) +
(1/4) * (x >=2 & x < 4) +
(-x/8 + 3/4) * (x >=4 & x < 6) +
(0) * (x >= 6)
}
curve(f, -1, 7)
#Q1
f <- function(x) {
(x/8) * (x >= 0 & x < 2) +
(1/4) * (x >=2 & x < 4) +
(-x/8 + 3/4) * (x >=4 & x < 6) +
(0) * (x >= 6)
}
curve(f, -1, 7)
#Q2
g <- function(x) {
((2/75) * x) * (x >=0 & x <= 5) +
(2/15) * (x > 5 & x <= 10) +
(0) * (x > 10)
}
#(a) Graph for all x
curve(g)
#(b) P(X>4)
integrate(g, 4, Inf)
#Q1
f <- function(x) {
(x/8) * (x >= 0 & x < 2) +
(1/4) * (x >=2 & x < 4) +
(-x/8 + 3/4) * (x >=4 & x < 6) +
(0) * (x >= 6)
}
curve(f, -1, 7)
#--------------------------------RV-----------------------
#Function to calculate prob for no of heads
head_prob <- function() {
Heads <- 0:3
Prob <- dbinom(Heads, 3, 0.5) #dinom to find exact prob.
data.frame(Heads, Prob)
}
coins_df <- head_prob() #Create dataframe
View(coins_df)
sum(coins_df$Prob)
#Curve given at certain points
p <- function(x) {(x) * (x > 0 & x < 1) + (2 - x) * (x >= 1 & x < 2) + (0) * (x >= 2)}
curve(p, 0, 2)
fx <- function(x) { (1/20)* (x >=0 & x <= 20) + (0) * (x >= 20)}
curve(fx, -1, 21)
diff <- function() {
H <- expand.grid(coin1 = 0:1, coin2 = 0:1)
H$diff <- abs(H$coin1 - H$coin2)
H_prob <- table(H$diff) / 4
data.frame(Difference = as.numeric(names(H_prob)), Prob = as.numeric(H_prob))
}
ok_df <- diff()
print(ok_df)
View(ok_df)
diff <- function() {
H <- expand.grid(coin1 = 0:1, coin2 = 0:1)
H$diff <- abs(H$coin1 - H$coin2)
H_prob <- table(H$diff) / 4
data.frame(Difference = as.numeric(names(H_prob)), Prob = as.numeric(H_prob))
}
diff <- function() {
H <- expand.grid(coin1 = 0:1, coin2 = 0:1)
H$diff <- abs(H$coin1 - H$coin2)
H_prob <- table(H$diff) / 4
data.frame(Difference = as.numeric(names(H_prob)), Prob = as.numeric(H_prob))
}
#Q2
heads_tails <- function() {
Heads_Tails <- seq(-3, 3, 2)
k <- c(3, 1, 1, 3)
Prob <- dbinom(k, 3, 0.5)
data.frame(Heads_Tails, Prob)
}
df <- heads_tails()
#(a) P(0<=x<=3)
p3 <- sum(df$Prob[df$Heads_Tails >= 0])
#(b) P(x>3)
p4 <- sum(df$Prob[df$Heads_Tails > 3])
print(df)
#Q2
heads_tails <- function() {
Heads_Tails <- seq(-3, 3, 2)
Prob <- dbinom(abs(Heads_Tails), 3, 0.5)
data.frame(Heads_Tails, Prob)
}
df <- heads_tails()
#(a) P(0<=x<=3)
p3 <- sum(df$Prob[df$Heads_Tails >= 0])
#(b) P(x>3)
p4 <- sum(df$Prob[df$Heads_Tails > 3])
print(df)
